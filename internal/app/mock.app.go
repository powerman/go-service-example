// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package app is a generated GoMock package.
package app

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAppl is a mock of Appl interface
type MockAppl struct {
	ctrl     *gomock.Controller
	recorder *MockApplMockRecorder
}

// MockApplMockRecorder is the mock recorder for MockAppl
type MockApplMockRecorder struct {
	mock *MockAppl
}

// NewMockAppl creates a new mock instance
func NewMockAppl(ctrl *gomock.Controller) *MockAppl {
	mock := &MockAppl{ctrl: ctrl}
	mock.recorder = &MockApplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppl) EXPECT() *MockApplMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method
func (m *MockAppl) HealthCheck(arg0 Ctx) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockApplMockRecorder) HealthCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockAppl)(nil).HealthCheck), arg0)
}

// Contacts mocks base method
func (m *MockAppl) Contacts(arg0 Ctx, arg1 Auth, arg2 SeekPage) ([]Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contacts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Contacts indicates an expected call of Contacts
func (mr *MockApplMockRecorder) Contacts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contacts", reflect.TypeOf((*MockAppl)(nil).Contacts), arg0, arg1, arg2)
}

// AddContact mocks base method
func (m *MockAppl) AddContact(arg0 Ctx, arg1 Auth, name string) (*Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContact", arg0, arg1, name)
	ret0, _ := ret[0].(*Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContact indicates an expected call of AddContact
func (mr *MockApplMockRecorder) AddContact(arg0, arg1, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContact", reflect.TypeOf((*MockAppl)(nil).AddContact), arg0, arg1, name)
}

// MockRepo is a mock of Repo interface
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// LstContacts mocks base method
func (m *MockRepo) LstContacts(arg0 Ctx, arg1 SeekPage) ([]Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LstContacts", arg0, arg1)
	ret0, _ := ret[0].([]Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LstContacts indicates an expected call of LstContacts
func (mr *MockRepoMockRecorder) LstContacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LstContacts", reflect.TypeOf((*MockRepo)(nil).LstContacts), arg0, arg1)
}

// AddContact mocks base method
func (m *MockRepo) AddContact(arg0 Ctx, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContact", arg0, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContact indicates an expected call of AddContact
func (mr *MockRepoMockRecorder) AddContact(arg0, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContact", reflect.TypeOf((*MockRepo)(nil).AddContact), arg0, name)
}
