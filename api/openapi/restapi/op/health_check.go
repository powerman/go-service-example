// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// HealthCheckHandlerFunc turns a function with the right signature into a health check handler
type HealthCheckHandlerFunc func(HealthCheckParams) HealthCheckResponder

// Handle executing the request and returning a response
func (fn HealthCheckHandlerFunc) Handle(params HealthCheckParams) HealthCheckResponder {
	return fn(params)
}

// HealthCheckHandler interface for that can handle valid health check params
type HealthCheckHandler interface {
	Handle(HealthCheckParams) HealthCheckResponder
}

// NewHealthCheck creates a new http.Handler for the health check operation
func NewHealthCheck(ctx *middleware.Context, handler HealthCheckHandler) *HealthCheck {
	return &HealthCheck{Context: ctx, Handler: handler}
}

/*HealthCheck swagger:route GET /health-check healthCheck

Returns 200 if service works okay.

*/
type HealthCheck struct {
	Context *middleware.Context
	Handler HealthCheckHandler
}

func (o *HealthCheck) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewHealthCheckParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
