// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SeekPagination Query paginated list starting with a specific item.
//
// swagger:model SeekPagination
type SeekPagination struct {

	// Include items with ID greater than since_id.
	// Required: true
	// Minimum: 0
	SinceID *int32 `json:"since_id"`

	// Maximum amount of items to return.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	Limit *int32 `json:"limit"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *SeekPagination) UnmarshalJSON(data []byte) error {
	var props struct {

		// Include items with ID greater than since_id.
		// Required: true
		// Minimum: 0
		SinceID *int32 `json:"since_id"`

		// Maximum amount of items to return.
		// Required: true
		// Maximum: 100
		// Minimum: 1
		Limit *int32 `json:"limit"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.SinceID = props.SinceID
	m.Limit = props.Limit
	return nil
}

// Validate validates this seek pagination
func (m *SeekPagination) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSinceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SeekPagination) validateSinceID(formats strfmt.Registry) error {

	if err := validate.Required("since_id", "body", m.SinceID); err != nil {
		return err
	}

	if err := validate.MinimumInt("since_id", "body", int64(*m.SinceID), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SeekPagination) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	if err := validate.MinimumInt("limit", "body", int64(*m.Limit), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limit", "body", int64(*m.Limit), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SeekPagination) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SeekPagination) UnmarshalBinary(b []byte) error {
	var res SeekPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
